type Query {
    "Return all courses"
    getCourses: [Course]
    "Return especific course"
    getCourse(id: ID!): Course

    "Return all persons"
    getPeople: [Person]
    "Return especific person"
    getPerson(id: ID!): Person
}

type Mutation {
    "Create a course"
    createCourse(input: CourseCreateInput!) : Course
    "Update especific course"
    updateCourse(id: ID!, input: CourseEditInput): Course
    "Delete especific course"
    deleteCourse(id: ID!): Course

    "Create a person"
    createPerson(input: PersonCreateInput!) : Person
    "Update especific person"
    updatePerson(id: ID!, input: PersonEditInput): Person
    "Delete especific person"
    deletePerson(id: ID!): Person

    "Add person to course"
    addPersonToCourse(courseID: ID!, studentID: ID!): Course
}

"Validations of type levels"
enum Level {
    beginner
    middle
    advanced
}

type Course {
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String @deprecated
    people: [Student]
    level: Level
}

input CourseCreateInput {
    title: String!
    teacher: String
    description: String!
    topic: String
    level: Level
}

input CourseEditInput {
    title: String
    teacher: String
    description: String
    topic: String
    level: Level
}

interface Person {
    _id: ID!
    document: String!
    name: String!
    email: String
}

type Student implements Person{
    _id: ID!
    document: String!
    name: String!
    email: String
    avatar: String
}

type Monitor implements Person{
    _id: ID!
    document: String!
    name: String!
    email: String
    phone: String
}

input PersonCreateInput {
    document: String!
    name: String!
    email: String
    phone: String
    avatar: String
}

input PersonEditInput {
    document: String
    name: String
    email: String
    phone: String
    avatar: String
}
