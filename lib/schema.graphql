type Query {
    "Return all courses"
    getCourses: [Course]
    "Return especific course"
    getCourse(id: ID!): Course

    "Return all students"
    getStudents: [Student]
    "Return especific students"
    getStudent(id: ID!): Student
}

type Mutation {
    "Create a course"
    createCourse(input: CourseCreateInput!) : Course
    "Update especific course"
    updateCourse(id: ID!, input: CourseEditInput): Course
    "Delete especific course"
    deleteCourse(id: ID!): Course

    "Create a student"
    createStudent(input: StudentCreateInput!) : Student
    "Update especific student"
    updateStudent(id: ID!, input: StudentEditInput): Student
    "Delete especific student"
    deleteStudent(id: ID!): Student

    "Add person to course"
    addPersonToCourse(courseID: ID!, studentID: ID!): Course
}

"Validations of type levels"
enum Level {
    beginner
    middle
    advanced
}

type Course {
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String
    people: [Student]
    level: Level
}

input CourseCreateInput {
    title: String!
    teacher: String
    description: String!
    topic: String
    level: Level
}

input CourseEditInput {
    title: String
    teacher: String
    description: String
    topic: String
    level: Level
}

type Student {
    _id: ID!
    document: String!
    name: String!
    email: String
}

input StudentCreateInput {
    document: String!
    name: String!
    email: String
}

input StudentEditInput {
    document: String
    name: String
    email: String
}
